using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Learn9
{
    //Классы в Си-шарп. Объявление классов и создание объектов 

    //Класс – это абстрактный тип данных. Другими словами, класс – это некоторый шаблон, на основе которого будут создаваться его экземпляры – объекты.

    //В Си-шарп классы объявляются с помощью ключевого слова class. Общая структура объявления выглядит следующим образом:

    //[модификатор доступа] class [имя_класса]
    //{
    //   //тело класса
    //}

    //Пример объявления классов Student и Pupil:

    //class Student //Без указания модификатора доступа будет internal
    //{

    //}
    //public class Pupil
    //{

    //}

    //Члены класса

    //Классы в Си - шарп могут содержать следующие члены:

    //-поля;
    //-константы;
    //-свойства;
    //-конструкторы;
    //-методы;
    //-события;
    //-операторы;
    //-индексаторы;
    //-вложенные типы.

    //Все члены класса, как и сам класс, имеют свой уровень доступа.Только у членов их может быть уже пять:

    //- public – доступ к члену возможен из любого места одной сборки, либо из другой сборки, на которую есть ссылка;
    //- protected – доступ к члену возможен только внутри класса, либо в классе-наследнике(при наследовании);
    //- internal – доступ к члену возможен только из сборки, в которой он объявлен;
    //- private – доступ к члену возможен только внутри класса;
    //- protected internal - доступ к члену возможен из одной сборки, либо из класса-наследника другой сборки.

    //Не указав модификатор доступа для члена, по умолчанию ему будет присвоен режим private.

    //При помощи модификаторов доступа в Си-шарп реализуется один из базовых принципов ООП – инкапсуляция.

    //Поля класса

    //Поле – это переменная, объявленная внутри класса.
    //Как правило, поля объявляются с модификаторами доступа private либо protected, чтобы запретить прямой доступ к ним.Для получения доступа к полям следует использовать свойства или методы.

    //class Student
    //{
    //    private string firstName;
    //    private string lastName;
    //    private int age;
    //    public string group;//Не рекоммендуется использовать public для поля!
    //}

    //Создание объектов

    //Объявив класс, мы теперь можем создавать объекты.Делается это при помощи ключевого слова new и имени класса:

    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        Student student1 = new Student();//Создание объекта student1 класса Student
    //        Student student2 = new Student();//Аналогично второй и т.д.
    //    }
    //}

    //Доступ к членам объекта осуществляется при помощи оператора точка «.» :

    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        Student student1 = new Student();//Создание объекта student1 класса Student
    //        Student student2 = new Student();//Аналогично второй и т.д.

    //        student1.group = "Group1";
    //        student2.group = "Group2";

    //        Console.WriteLine(student1.group);
    //        Console.Write(student2.group);
    //        Console.ReadKey();
    //    }
    //}

    //Такие поля класса Student, как firstName, lastName и age указаны с модификатором доступа private, поэтому доступ к ним будет запрещен вне класса:

    //static void Main(string[] args)
    //{
    //    Student student1 = new Student();
    //    student1.firstName = "Nikolay"; //ошибка, нет доступа к полю firstName. Программа не скомпилируется 
    //}

    //Константы

    //Константы-члены класса ничем не отличаются от простых констант внутри методов, которые рассматривались в уроке переменные и константы.

    //Константа – это переменная, значений которой нельзя изменить.Константа объявляется с помощью ключевого слова const. Пример объявления константы:

    //class Math
    //{
    //    private const double Pi = 3.14;
    //}

    //Домашнее задание

    //Создайте какой-нибудь класс(например класс Автомобиль), объявите в нем поля с различными режимами доступа(private, protected, internal, public).
    //Создайте объект класса, и попытайтесь записать/получить данные с различных полей.

    //class Automob
    //{
    //    private string mark;
    //    protected string klass;
    //    internal int price;
    //    public string colour;
    //}

    //class Program
    //{
    //    static void Main(string[] args)
    //    {
    //        Automob auto1 = new Automob();
    //        Automob auto2 = new Automob();
    //        Automob auto3 = new Automob();

    //        auto3.colour = "red";
    //        auto2.price = 150000;
    //        //auto1.klass = "B";//Ошибка, т.к. klass = protected как и mark = private
    //        Console.WriteLine(auto3.colour);
    //        Console.WriteLine(auto2.price);
    //        Console.ReadKey();
    //    }
    //}
        



}
